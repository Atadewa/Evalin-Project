@props([
  "headers" => [],
  "data" => [],
  "searchable" => true,
  "sortable" => true,
  "searchableColumns" => [],
  //Arrayofcolumnindicesthatshouldbesearchable(0-based),
  "sortableColumns" => [],
  //Arrayofcolumnindicesthatshouldbesortable(0-based),
  //ifemptyallcolumnsaresortable,
])

<div class="bg-white rounded-lg shadow overflow-hidden">
  @if ($searchable)
    <div class="p-3 sm:p-4 border-b border-gray-200">
      <div
        class="flex flex-col sm:flex-row items-stretch sm:items-center gap-3 sm:gap-4"
      >
        <div class="flex-1 min-w-0">
          <input
            type="text"
            id="tableSearch"
            placeholder="Search..."
            class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-primary focus:border-primary text-sm"
          />
        </div>
        <div class="flex-shrink-0">
          <select
            id="tablePageSize"
            class="w-full sm:w-auto pl-3 pr-8 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-primary focus:border-primary text-sm"
          >
            <option value="10">10 per page</option>
            <option value="25">25 per page</option>
            <option value="50">50 per page</option>
            <option value="100">100 per page</option>
          </select>
        </div>
      </div>
    </div>
  @endif

  <div class="overflow-x-auto max-w-full">
    <table
      class="divide-y divide-gray-200 table-with-column-borders"
      id="dataTable"
      style="min-width: 1200px; width: max-content"
    >
      <thead class="bg-gray-50">
        <tr>
          @foreach ($headers as $index => $header)
            @php
              $isSortable = $sortable && (empty($sortableColumns) || in_array($index, $sortableColumns));
            @endphp

            <th
              class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200 last:border-r-0 {{ $isSortable ? "cursor-pointer hover:bg-gray-100" : "" }}"
              @if($isSortable) data-sortable @endif
            >
              {{ $header }}
              @if ($isSortable)
                <i class="fas fa-sort ml-1 text-gray-400"></i>
              @endif
            </th>
          @endforeach
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        {{ $slot }}
      </tbody>
    </table>
  </div>

  <!-- Pagination will be handled by JavaScript -->
  <div class="bg-gray-50 px-3 sm:px-4 py-3 border-t border-gray-200">
    <div
      class="flex flex-col sm:flex-row items-center justify-between gap-3 sm:gap-0"
    >
      <div class="flex items-center order-2 sm:order-1">
        <p class="text-xs sm:text-sm text-gray-700" id="tableInfo">
          Showing
          <span id="tableStart">1</span>
          to
          <span id="tableEnd">10</span>
          of
          <span id="tableTotal">0</span>
          results
        </p>
      </div>
      <div
        class="flex flex-wrap justify-center gap-1 order-1 sm:order-2"
        id="tablePagination"
      >
        <!-- Pagination buttons will be generated by JavaScript -->
      </div>
    </div>
  </div>
</div>

@push("styles")
  <style>
    .table-with-column-borders td {
      border-right: 1px solid #d1d5db;
    }
    .table-with-column-borders td:last-child {
      border-right: none;
    }

    /* Ensure table content is fully visible with horizontal scrolling */
    .table-with-column-borders th,
    .table-with-column-borders td {
      white-space: nowrap;
      padding: 12px 16px;
    }

    /* Smooth horizontal scrolling */
    .overflow-x-auto {
      scroll-behavior: smooth;
    }

    /* Custom scrollbar styling for better UX */
    .overflow-x-auto::-webkit-scrollbar {
      height: 8px;
    }

    .overflow-x-auto::-webkit-scrollbar-track {
      background: #f1f5f9;
      border-radius: 4px;
    }

    .overflow-x-auto::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 4px;
    }

    .overflow-x-auto::-webkit-scrollbar-thumb:hover {
      background: #94a3b8;
    }

    /* Set flexible column widths that maintain content visibility */
    .table-with-column-borders th:nth-child(1),
    .table-with-column-borders td:nth-child(1) {
      min-width: 60px;
      width: 60px;
    }
    .table-with-column-borders th:nth-child(2),
    .table-with-column-borders td:nth-child(2) {
      min-width: 180px;
      width: auto;
    }
    .table-with-column-borders th:nth-child(3),
    .table-with-column-borders td:nth-child(3) {
      min-width: 150px;
      width: auto;
    }
    .table-with-column-borders th:nth-child(4),
    .table-with-column-borders td:nth-child(4) {
      min-width: 160px;
      width: auto;
    }
    .table-with-column-borders th:nth-child(5),
    .table-with-column-borders td:nth-child(5) {
      min-width: 160px;
      width: auto;
    }
    .table-with-column-borders th:nth-child(6),
    .table-with-column-borders td:nth-child(6) {
      min-width: 200px;
      width: auto;
    }
    .table-with-column-borders th:nth-child(7),
    .table-with-column-borders td:nth-child(7) {
      min-width: 80px;
      width: 80px;
    }
    .table-with-column-borders th:nth-child(8),
    .table-with-column-borders td:nth-child(8) {
      min-width: 80px;
      width: 80px;
    }
    .table-with-column-borders th:nth-child(9),
    .table-with-column-borders td:nth-child(9) {
      min-width: 150px;
      width: auto;
    }
    .table-with-column-borders th:nth-child(10),
    .table-with-column-borders td:nth-child(10) {
      min-width: 150px;
      width: auto;
    }
  </style>
@endpush

@push("scripts")
  <script>
    document.addEventListener('DOMContentLoaded', function () {
      const table = document.getElementById('dataTable');
      if (table) {
        // Simple table functionality
        const tbody = table.querySelector('tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));
        const searchInput = document.getElementById('tableSearch');
        const pageSizeSelect = document.getElementById('tablePageSize');

        let currentPage = 1;
        let pageSize = 10;
        let filteredRows = rows;
        let sortColumn = -1;
        let sortDirection = 'asc';

        function applySorting() {
          if (sortColumn === -1) return;

          filteredRows.sort((a, b) => {
            const cellA = a.querySelectorAll('td')[sortColumn];
            const cellB = b.querySelectorAll('td')[sortColumn];

            if (!cellA || !cellB) return 0;

            let textA = cellA.textContent.trim();
            let textB = cellB.textContent.trim();

            // Try to parse as numbers for numeric sorting
            const numA = parseFloat(textA.replace(/[^\d.-]/g, ''));
            const numB = parseFloat(textB.replace(/[^\d.-]/g, ''));

            let comparison = 0;
            if (!isNaN(numA) && !isNaN(numB)) {
              // Numeric comparison
              comparison = numA - numB;
            } else {
              // Text comparison
              comparison = textA.localeCompare(textB, undefined, {
                numeric: true,
                sensitivity: 'base',
              });
            }

            return sortDirection === 'asc' ? comparison : -comparison;
          });

          // Re-order the DOM elements to reflect the sorted order
          filteredRows.forEach((row, index) => {
            tbody.appendChild(row);
          });
        }

        function updateTable() {
          // Apply sorting first
          applySorting();

          const start = (currentPage - 1) * pageSize;
          const end = start + pageSize;

          // Hide all rows
          rows.forEach((row) => (row.style.display = 'none'));

          // Show current page rows
          filteredRows
            .slice(start, end)
            .forEach((row) => (row.style.display = ''));

          // Update info
          document.getElementById('tableStart').textContent = Math.min(
            start + 1,
            filteredRows.length,
          );
          document.getElementById('tableEnd').textContent = Math.min(
            end,
            filteredRows.length,
          );
          document.getElementById('tableTotal').textContent =
            filteredRows.length;

          // Update pagination
          updatePagination();
        }

        function updatePagination() {
          const totalPages = Math.ceil(filteredRows.length / pageSize);
          const pagination = document.getElementById('tablePagination');
          pagination.innerHTML = '';

          // Previous button
          const prevBtn = document.createElement('button');
          prevBtn.className = `px-3 py-1 text-sm border rounded-l-md ${currentPage === 1 ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
          prevBtn.innerHTML = '<i class="fas fa-chevron-left"></i>';
          prevBtn.disabled = currentPage === 1;
          prevBtn.onclick = () => {
            if (currentPage > 1) {
              currentPage--;
              updateTable();
            }
          };
          pagination.appendChild(prevBtn);

          // Page numbers (simplified - show current page and adjacent pages)
          const startPage = Math.max(1, currentPage - 1);
          const endPage = Math.min(totalPages, currentPage + 1);

          for (let i = startPage; i <= endPage; i++) {
            const pageBtn = document.createElement('button');
            pageBtn.className = `px-3 py-1 text-sm border-t border-b ${i === currentPage ? 'bg-primary text-white' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
            pageBtn.textContent = i;
            pageBtn.onclick = () => {
              currentPage = i;
              updateTable();
            };
            pagination.appendChild(pageBtn);
          }

          // Next button
          const nextBtn = document.createElement('button');
          nextBtn.className = `px-3 py-1 text-sm border rounded-r-md ${currentPage === totalPages ? 'bg-gray-100 text-gray-400 cursor-not-allowed' : 'bg-white text-gray-700 hover:bg-gray-50'}`;
          nextBtn.innerHTML = '<i class="fas fa-chevron-right"></i>';
          nextBtn.disabled = currentPage === totalPages;
          nextBtn.onclick = () => {
            if (currentPage < totalPages) {
              currentPage++;
              updateTable();
            }
          };
          pagination.appendChild(nextBtn);
        }

        // Search functionality
        if (searchInput) {
          // Get searchable columns configuration
          const searchableColumns = @json($searchableColumns);

          searchInput.addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase();
            filteredRows = rows.filter((row) => {
              const cells = row.querySelectorAll('td');

              // If no specific columns configured, search all columns
              if (searchableColumns.length === 0) {
                const text = row.textContent.toLowerCase();
                return text.includes(searchTerm);
              }

              // Search only in specified columns
              return searchableColumns.some((columnIndex) => {
                if (cells[columnIndex]) {
                  const cellText = cells[columnIndex].textContent.toLowerCase();
                  return cellText.includes(searchTerm);
                }
                return false;
              });
            });

            currentPage = 1;
            updateTable();
          });
        }

        // Page size change
        if (pageSizeSelect) {
          pageSizeSelect.addEventListener('change', function () {
            pageSize = parseInt(this.value);
            currentPage = 1;
            updateTable();
          });
        }

        // Sorting functionality
        const sortableColumns = @json($sortableColumns);
        const allHeaders = table.querySelectorAll('th');

        allHeaders.forEach((header, columnIndex) => {
          // Check if this column is sortable
          const isColumnSortable =
            sortableColumns.length === 0 ||
            sortableColumns.includes(columnIndex);

          if (isColumnSortable && header.hasAttribute('data-sortable')) {
            header.addEventListener('click', function () {
              // Toggle sort direction if clicking the same column
              if (sortColumn === columnIndex) {
                sortDirection = sortDirection === 'asc' ? 'desc' : 'asc';
              } else {
                sortColumn = columnIndex;
                sortDirection = 'asc';
              }

              // Update header icons
              allHeaders.forEach((h, i) => {
                const icon = h.querySelector('i');
                if (icon) {
                  if (i === columnIndex) {
                    icon.className =
                      sortDirection === 'asc'
                        ? 'fas fa-sort-up ml-1 text-gray-600'
                        : 'fas fa-sort-down ml-1 text-gray-600';
                  } else {
                    icon.className = 'fas fa-sort ml-1 text-gray-400';
                  }
                }
              });

              currentPage = 1;
              updateTable();
            });
          }
        });

        // Initial render
        updateTable();
      }
    });
  </script>
@endpush
